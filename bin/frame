#!/usr/bin/env node
const process = require('process');
const program = require('commander');
const runner = require('../runner');

const cwd = process.cwd();
const gulp = runner.gulp.run({ directory: cwd });
const documentation = runner.documentation;
const pkg = require('../package.json');
const path = require('path');

const log = require('../scripts/utils').log;

program.version(pkg.version || 'N/A');

program
    .command('build')
    .description('compiles and packages your webcomponent ready to be released on NPM')
    .option('-i, --index <path>', 'Relative path to .md file to use as index html')
    .action(build);

program
    .command('start')
    .description('Watch for changes')
    .option('-o, --open', 'opens the URL in default browser')
    .option('-i, --index <path>', 'Relative path to .md file to use as index html')
    .action(start);

program.parse(process.argv);

if (program.args.length < 1) {
    program.outputHelp();
}

function build(options) {
    log('Compiling...', 1, 'Build');
    gulp
        .compile(options)
        .then(() => {
            if (!options.index) {
                log('Generating json index', 1, 'Build');
                return documentation.createIndex();
            }
        })
        .then(() => {
            if (!options.index) {
                log('Generating index html', 1, 'Build');
                return documentation.createOverview();
            }
        })
        .then(() => {
            if (options.index) {
                log('Generating index html', 1, 'Build');
                return documentation.createIndexHTML(
                    path.resolve(cwd, 'dist', options.index.replace('.md', '.html')),
                );
            }
        })
        .catch(err => log(`Error: ${err}`, 4, 'Build'));
}
function start(options) {
    log('Compiling...', 1, 'Start');
    gulp
        .compile()
        .then(() => {
            if (!options.index) {
                log('Generating sitemap', 1, 'Start');
                return documentation.createIndex();
            }
        })
        .then(() => {
            if (!options.index) {
                log('Generating overview', 1, 'Start');
                return documentation.createOverview();
            }
        })
        .then(() => {
            log('Watching for changes...', 1, 'Start');
            return gulp.watch();
        })
        .then(() => {
            if (options.open) {
                log('Starting BrowserSync...', 1, 'Start');
                if (!options.styleguide && options.index) {
                    runner.bs.init(cwd, options.index);
                } else {
                    runner.bs.init(cwd);
                }
            }
        })
        .catch(err => log(`Error: ${err}`, 4, 'Start'));
}
